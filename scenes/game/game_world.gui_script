local COMMON = require "libs.common"
local ACTIONS = require "libs.actions.actions"
local COLOR_UTILS = require "richtext.color"
local CAMERAS = require "libs_project.cameras"

local COLORS = {
    SCORE_BAD = COLOR_UTILS.parse_hex("#ff0000"),
    SCORE_GOOD = COLOR_UTILS.parse_hex("#00ff00")
}

local BaseGuiScript = require "libs_project.scripts.base_gui_script"

---@class ScoreChangeLbl
local ScoreChangeLbl = COMMON.class("ScoreChangeLbl")

function ScoreChangeLbl:initialize(nodes)
    self.vh = {
        root = assert(nodes["score_lbl/root"]),
        lbl = assert(nodes["score_lbl/lbl"])
    }
    self.animation = ACTIONS.Sequence()
    self.animation.drop_empty = false
end

function ScoreChangeLbl:score_set(score)
    checks("?", "number")
    gui.set_text(self.vh.lbl, score)
    gui.set_color(self.vh.lbl,score >= 0 and COLORS.SCORE_GOOD or COLORS.SCORE_BAD)
end

function ScoreChangeLbl:animate(position)
    checks("?", "table|userdata")
    assert(position.x and position.y, "bad position")
    gui.set_position(self.vh.root, position)
    local position_start = vmath.vector3(position.x, position.y, 0)
    local position_end = vmath.vector3(position.x, position.y + 100, 0)
    local text_color = gui.get_color(self.vh.lbl)
    self.animation:add_action(function()
        gui.set_enabled(self.vh.root, true)
        gui.set_scale(self.vh.root, vmath.vector4(0.01))
        gui.set_position(self.vh.root, position_start)

    end)
    local parallel = ACTIONS.Parallel()
    parallel:add_action(ACTIONS.TweenGui { object = self.vh.root, property = "scale", v3 = true,
                                           from = vmath.vector3(0.2), to = vmath.vector3(1), time = 0.2 })
    parallel:add_action(ACTIONS.TweenGui { object = self.vh.root, property = "position", v3 = true,
                                           from = position_start, delay = 0.25, to = position_end, time = 0.8 })
    parallel:add_action(ACTIONS.TweenGui { object = self.vh.root, property = "color", v4 = true,
                                           from = text_color, delay = 0.35, to = vmath.vector4(text_color.x,
                text_color.y,text_color.z,0), time = 0.5 })
    self.animation:add_action(parallel)
    self.animation:add_action(function ()
        gui.delete_node(self.vh.root)
        self.remove = true
    end)

end

function ScoreChangeLbl:update(dt)
    self.animation:update(dt)
end

---@class GameWorldGuiScript:GuiScriptBase
local Script = COMMON.class("GameWorldGuiScript", BaseGuiScript)

function Script:init()
    BaseGuiScript.init(self, { context_name = COMMON.CONTEXT.NAMES.GAME_WORLD_GUI })
    self.subscription = COMMON.RX.SubscriptionsStorage()
    self.scheduler = COMMON.RX.CooperativeScheduler.create()
    self.subscription:add(COMMON.EVENT_BUS:subscribe(COMMON.EVENTS.WINDOW_RESIZED):go_distinct(self.scheduler)
    :subscribe(function ()
        self:on_window_size_changed()
    end))

    self:on_window_size_changed()
end

function Script:bind_vh()
    self.vh = {
        score_lbl = assert(gui.get_node("score_lbl/root")),
        bg_fader = assert(gui.get_node("bg_fader"))
    }
    self.views = {
        ---@type ScoreChangeLbl[]
        score_labels = {}
    }
end

function Script:init_gui()
    BaseGuiScript.init_gui(self)
    gui.set_enabled(self.vh.score_lbl, false)
end

function Script:score_change_animate(config)
    checks("?", {
        position = "table|userdata",
        score = "number"
    })
    assert(config.position.x and config.position.y, "bad position")
    local view = ScoreChangeLbl(gui.clone_tree(self.vh.score_lbl))
    view:score_set(config.score)
    view:animate(config.position)
    table.insert(self.views.score_labels, view)
end

function Script:on_window_size_changed()
    gui.set_size(self.vh.bg_fader,vmath.vector3(CAMERAS.game_camera.view_area.x,CAMERAS.game_camera.view_area.y,0))
end

function Script:update(dt)
    self.scheduler:update(dt)
    for i = #self.views.score_labels, 1, -1 do
        local v = self.views.score_labels[i]
        v:update(dt)
        if (v.remove) then table.remove(self.views.score_labels, i) end
    end
end

function Script:final()
    self.subscription:unsubscribe()
end

COMMON.N28S.register(Script())